Project Overview
This project implements an advanced stock price prediction system that combines Convolutional Neural Networks (CNN) and Long Short-Term Memory (LSTM) networks through an ensemble approach. The system is designed to predict the next price movement of stocks, specifically demonstrated with Reliance Industries (RELIANCE.NS) stock data.

Technical Architecture
1. Data Processing
Data Source: Uses yfinance to fetch real-time stock data
Time Interval: 30-minute intervals
Features:
Open price
High price
Low price
Close price
Trading volume
Sequence Length: 15 time steps for both models
Data Preprocessing: MinMaxScaler for feature normalization
2. Model Architecture
2.1 CNN Model
python
CopyInsert
Architecture:
- Input Layer: [batch_size, 1, 15, 5]
- Conv1: 128 filters, 3x3 kernel, padding=1
- MaxPool: 2x2 kernel, stride=1
- Dropout: 0.3
- Conv2: 64 filters, 3x3 kernel
- Dropout: 0.3
- Fully Connected 1: 1536 -> 64
- Fully Connected 2: 64 -> 1
2.2 LSTM Model
python
CopyInsert
Architecture:
- Input Layer: [batch_size, 15, 5]
- Custom LSTM:
  - Input Size: 5
  - Hidden Size: 64
  - Gates: Input, Forget, Cell, Output
  - Optional Peephole Connections
  - Dropout: 0.1
- Output Layer: Hidden Size -> 1
2.3 Ensemble Model
Combines predictions from both CNN and LSTM models
Uses learnable weights (initialized at 0.5 each)
Weights are normalized using softmax
Final prediction = (CNN_weight × CNN_prediction) + (LSTM_weight × LSTM_prediction)
Implementation Details
1. Main Components
models.py: Contains model architectures
CustomLSTM: Custom implementation of LSTM
cnn_for_time_series: CNN for sequence processing
EnsembleModel: Combines both models
main.py: Handles:
Data fetching and preprocessing
Model loading and initialization
Prediction generation
Results presentation
2. Key Features
Real-time data fetching
Automated sequence creation
Ensemble prediction with individual model insights
Price change percentage calculation
Configurable sequence length and model parameters
Model Performance
Based on recent predictions:

CNN Model:
More conservative predictions
Typical change predictions: ±0.2-0.3%
Higher stability in predictions
LSTM Model:
More sensitive to trends
Typical change predictions: ±0.7-0.8%
Better at capturing trend changes
Ensemble Model:
Balanced predictions
Leverages strengths of both models
More robust to market fluctuations
Technical Implementation Notes
1. Data Processing Pipeline
python
CopyInsert
1. Fetch Data:
   - Download from Yahoo Finance
   - 50-day historical data
   - 30-minute intervals

2. Preprocessing:
   - Scale features to [0,1] range
   - Create sequences of 15 time steps
   - Prepare appropriate tensor shapes for each model
2. Prediction Process
python
CopyInsert
1. Data Input:
   - CNN: Reshape to include channel dimension
   - LSTM: Use sequential data directly

2. Model Processing:
   - Generate individual predictions
   - Apply learned weights
   - Combine predictions

3. Output Processing:
   - Inverse transform predictions
   - Calculate price changes
   - Format results
Future Improvements
Model Enhancements:
Add attention mechanisms to LSTM
Implement more sophisticated ensemble methods
Add technical indicators as features
Feature Engineering:
Include market sentiment analysis
Add technical indicators (RSI, MACD, etc.)
Consider market indices correlation
System Improvements:
Add backtesting capabilities
Implement real-time trading signals
Add visualization of predictions
Include confidence intervals
Dependencies
Python 3.x
PyTorch
yfinance
pandas
numpy
scikit-learn
joblib
Usage
The system can be run by executing main.py, which will:

Load the pre-trained models
Fetch current market data
Generate predictions using all models
Display current price and predictions with change percentages
This project demonstrates a sophisticated approach to stock price prediction by combining traditional deep learning architectures in an ensemble model, providing both accuracy and reliability in predictions.